ANNOT_OBJECTS=["gene", "transcript"]
METRICS=['tpm', 'fpkm']
# set minimum snakemake version
from snakemake.utils import min_version
min_version("6.6.1")

rule all:
    input:
        corrected=expand(config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}s-corrected-{metric}s",accession=config["accession"],genes_or_transcripts=ANNOT_OBJECTS, metric=METRICS)

rule copy_genes_data:
    input:
        raw_counts_file=config['cache_path']+"/data/{accession}/{accession}-raw-counts.tsv.undecorated"
    output:
        labeled_genes_raw_counts=config['cache_path']+"/data/{accession}/{accession}-genes-raw-counts.tsv.undecorated"
    shell:
        "cp {input.raw_counts_file} {output.labeled_genes_raw_counts}"

rule gene_feature_lengths_in_R:
    input:
        gtf=config['cache_path']+"/data/{accession}/{accession}.gtf"
    output:
        rdata=config['cache_path']+"/data/{accession}/lengths/{accession}.lengths.Rdata",
	gene_lengths=config['cache_path']+"/data/{accession}/lengths/{accession}.lengths.gene_length.tsv",
	exon_lentgh=config['cache_path']+"/data/{accession}/lengths/{accession}.lengths.exon_length.tsv",
	trans_length=config['cache_path']+"/data/{accession}/lengths/{accession}.lengths.trans_length.tsv"
    params:
        lengths=config['cache_path']+"/data/{accession}/lengths/{accession}.lengths"
    log: config['cache_path']+"/data/{accession}/logs/{accession}.lengths.log"
    conda:
        "envs/ma_irap_components.yaml"
    threads: 2
    shell:
        """
	irap_gtf2featlength --gtf {input.gtf} --out {params.lengths} --cores {threads} > {log}
        """

rule quantile_normalize:
    input:
        configuration_file=config['cache_path']+"/data/{accession}/{accession}-configuration.xml",
        raw_counts_file=config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}s-raw-counts.tsv.undecorated"
    output:
        quantile_result=config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}s-quantile-counts.tsv"
    log: config['cache_path']+"/data/{accession}/logs/{accession}-{genes_or_transcripts}s-counts.log"
    conda:
        "envs/ma_quantile_transform.yaml"
    shell:
        """
        {workflow.basedir}/bin/quantile_normalize_meta.sh \
            -c {input.configuration_file} \
            -s {input.raw_counts_file} \
            -d {output.quantile_result} > {log}
        """

rule transform2R:
    input:
        quantile_result=rules.quantile_normalize.output.quantile_result,
        sdrf=config['cache_path']+"/data/{accession}/{accession}.sdrf.txt",
        configuration_file=rules.quantile_normalize.input.configuration_file,
        methods_file=config['cache_path']+"/data/{accession}/{accession}-analysis-methods.tsv"
    output:
        rdata=config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}_summarizedExp.rdata"
    conda:
        "envs/ma_quantile_transform.yaml"
    params:
        batch=config["batch"]
    log: config['cache_path']+"/data/{accession}/logs/{accession}-{genes_or_transcripts}s-summarizedExp.log"
    shell:
        """
        {workflow.basedir}/bin/transform2R.r \
            --countstsv {input.quantile_result} \
            --sdrf {input.sdrf} \
            --configuration {input.configuration_file} \
            --methods {input.methods_file} \
            --batch {params.batch} \
	    --remove_single_batch_genes \
            --output {output.rdata} > {log}
        """

rule batch_correction_v2:
    input:
        counts=rules.transform2R.output.rdata
    output:
        summarized_rdata=config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}-corrected_summarizedExp.rdata",
        tsv_corrected_counts=config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}-corrected_counts.tsv"
    conda:
        "envs/ma_batch_correct_combat.yaml"
    log: config['cache_path']+"/data/{accession}/logs/{accession}-{genes_or_transcripts}-corrected_counts.log"
    shell:
        """
        {workflow.basedir}/bin/batch_correction_v2.R \
            -i {input.counts} \
            --output {output.summarized_rdata} \
            --tsv_corrected_counts {output.tsv_corrected_counts} > {log}
        """

rule irap_raw2metric:
    input:
        counts=rules.batch_correction_v2.output.tsv_corrected_counts,
        lengths=rules.gene_feature_lengths_in_R.output.rdata
    output:
        corrected=config['cache_path']+"/data/{accession}/{accession}-{genes_or_transcripts}s-corrected-{metric}s"
    conda:
        "envs/ma_irap_components.yaml"
    log: config['cache_path']+"/data/{accession}/logs/{accession}-{genes_or_transcripts}s-corrected-{metric}s.log"
    shell:
        """
	irap_raw2metric -i {input.counts} \
            --lengths {input.lengths} \
            --feature {wildcards.genes_or_transcripts} \
            --metric {wildcards.metric} \
            --out {output.corrected} > {log}
        """

